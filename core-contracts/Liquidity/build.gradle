
/*
 * Copyright (c) 2022-2022 Balanced.network.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import network.balanced.score.dependencies.Dependencies


version = '0.1.0'

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

//public static final String javaeePlugin = "foundation.icon:gradle-javaee-plugin:0.8.0";
//    public static final String javaeeApi = "foundation.icon:javaee-api:0.9.1";
//    public static final String javaeeScorex = "foundation.icon:javaee-scorex:0.5.2";
//    public static final String javaeeTokens = "com.github.sink772:javaee-tokens:0.6.1";
//    public static final String javaeeUnitTest = "foundation.icon:javaee-unittest:0.9.2";
//
//    public static final String junitJupiter = "org.junit.jupiter:junit-jupiter:5.8.2";
//    public static final String junitJupiterEngine = "org.junit.jupiter:junit-jupiter-engine:5.8.2";
//    public static final String mockitoCore = "org.mockito:mockito-core:4.3.1";
//    public static final String mockitoInline = "org.mockito:mockito-inline:4.3.1";


dependencies {
    compileOnly Dependencies.javaeeApi

    implementation project(':score-lib')
    implementation Dependencies.javaeeTokens
    implementation Dependencies.javaeeScorex
    implementation Dependencies.minimalJson

    testImplementation Dependencies.javaeeUnitTest
    testImplementation Dependencies.junitJupiterEngine
    
    testRuntimeOnly Dependencies.junitJupiterEngine
    testImplementation Dependencies.mockitoCore
}

optimizedJar {
    mainClassName = 'network.balanced.score.core.liquidity.Liquidity'
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from {
        configurations.runtimeClasspath.collect{it.isDirectory() ? it : zipTree(it)}
    }
    enableDebug = false
}

deployJar {
    endpoints {
        sejong {
            uri = 'https://sejong.net.solidwallet.io/api/v3'
            nid = 0x53
            to = "cx75256fadf232ad1124d9c6cd70c9b1ec122a0f47"
        }
        local {
            uri = 'http://localhost:9082/api/v3'
            nid = 0x3
        }
        mainnet {
            uri = 'https://ctz.solidwallet.io/api/v3'
            nid = 0x1
            to = "cx793970c9ec84eb0dcb6164965c74fe678474d7c7"
        }
    }
    keystore = rootProject.hasProperty('keystoreName') ? "$keystoreName" : ''
    password = rootProject.hasProperty('keystorePass') ? "$keystorePass" : ''
    parameters {}
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}
